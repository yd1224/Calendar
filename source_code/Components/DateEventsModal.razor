@using Calendar.Models
@using Calendar.Services
@inject LocalStorageService LocalStorageService

<div class="overlay" @onclick="@CloseModal"></div>
<div class="modal" id="modal">
    <div class="modal-header">
        <h3>Add To Do for @Date</h3>
        <div class="modal-close" @onclick="@CloseModal">
            <span>x</span>
        </div>
    </div>
    <div class="modal-content">
        <div class="row">
            <div class="col-6">
                <EditForm Model="@newTodo" OnValidSubmit="@HandleValidSubmit">
                    <div class="form-group">
                        <label for="title">Title</label>
                        <input id="title" class="form-control" @bind-value="newTodo.Title"/>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" class="form-control" @bind="newTodo.Description"></textarea>
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Add To Do</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public string Date { get; set; } = string.Empty;
    [Parameter] public EventCallback CloseModal { get; set; }
    [Parameter] public EventCallback<string> UpdateDay { get; set; }

    private TodoItem newTodo = new();

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(newTodo.Title))
        {
            return;
        }

        newTodo.Date = DateTime.Now;
        
        await LocalStorageService.SetToDoToLocalStorage(Date, newTodo);
        await UpdateDay.InvokeAsync(Date);
        await CloseModal.InvokeAsync();
    }

}